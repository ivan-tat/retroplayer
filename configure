#!/bin/bash
#
# This script writes configuration to build the project.
#
# This is free and unencumbered software released into the public domain.
# For more information, please refer to <http://unlicense.org>.
#
# Supported environments:
#   * GNU/Linux
#
# Debian packages used: coreutils, bash, dialog | whiptail.


set -e
shopt -s extglob

Warn_DoNotEditManually='DO NOT EDIT THIS FILE MANUALLY - this file is generated by "configure" script.'

declare -a VarIndex
declare -A VarType
declare -A VarValue
declare -A VarScope
declare -A VarDesc

# $1=name $2=type $3=value $4=scope $5=description
add_var() {
    VarIndex[${#VarIndex[@]}]=$1
    VarType[$1]=$2
    VarValue[$1]="$3"
    VarScope[$1]="$4"
    VarDesc[$1]="$5"
}

add_var LINKER_TPC bool 0 'make c' \
    '[Build] Use Pascal linker'
add_var DEBUG_COMPILE bool 0 'make' \
    '[Build] Debug build'
add_var SYSDEBUG bool 0 'c pascal' \
    '[SysDebug] Enable logging to console from system methods'
add_var SYSDEBUG_IOBUF bool 0 'c pascal' \
    '[SysDebug] - file I/O'
add_var SYSDEBUG_ENV bool 0 'c pascal' \
    '[SysDebug] - environment variables'
add_var DEBUG bool 0 'c pascal' \
    '[Debug] Normal logging'
add_var DEBUG_WRITE_LOG bool 0 'c pascal' \
    '[Debug] Write log to a file'
add_var DEBUG_FILE_S3M_LOAD bool 0 'c pascal' \
    '[Debug] Log S3M files loading'
add_var DEBUG_WRITE_OUTPUT_STREAM bool 0 'c pascal' \
    '[Debug] Write output PCM streams to files'
add_var USE_INTRINSICS bool 0 'c pascal' \
    '[Code] Generate inline code for some methods'
add_var CONFIG_VBIOS_ENABLE_LIGHT_PEN bool 0 'c pascal' \
    '[Code] Enable light pen VBIOS support'

declare DIALOG

DIALOG="`which dialog`" || true
if [[ x"$DIALOG" == x ]]; then
    DIALOG=`which whiptail`
fi
if [[ x"$DIALOG" == x ]]; then
    echo 'Error: no "dialog" nor "whiptail" found.' >&2
    exit 1
fi

setup_flags() {
    local -a _name
    local -A _value
    local tmp
    local tmp1
    local -i i
    local x
    tmp=`mktemp`
    tmp1=`mktemp`
    count=0
    for (( i=0 ; i<${#VarIndex[@]} ; i++ )) ; do
        x=${VarIndex[$i]}
        if [[ ${VarType[$x]} == bool ]]; then
            _name[${#_name[@]}]=$x
            _value[$x]=0
            echo "$x '${VarDesc[$x]}' ${VarValue[$x]} \\" >> "$tmp1"
        fi
    done
    echo "$DIALOG --notags --separate-output --checklist 'Select flags' 20 70 ${#_name[@]} \\" > "$tmp"
    cat "$tmp1" >> "$tmp"
    echo ' ' >> "$tmp"
    . "$tmp" 2> "$tmp1" || { rm -f "$tmp" "$tmp1"; return 1; }
    rm -f "$tmp"
    while read x; do
        _value[$x]=1
    done < "$tmp1"
    rm -f "$tmp1"
    for (( i=0 ; i<${#_name[@]} ; i++ )) ; do
        x=${_name[$i]}
        VarValue[$x]=${_value[$x]}
    done
}

mkdefs_make() {
    local -i i
    local x
    echo "# $Warn_DoNotEditManually"
    for (( i=0 ; i<${#VarIndex[@]} ; i++ )) ; do
        x=${VarIndex[$i]}
        if [[ " ${VarScope[$x]} " =~ \ +make\ + ]]; then
            if [[ ${VarType[$x]} == bool ]]; then
                echo "$x = ${VarValue[$x]}"
            fi
        fi
    done
}

mkdefs_c() {
    local -i i
    local x
    echo "/* $Warn_DoNotEditManually */"
    for (( i=0 ; i<${#VarIndex[@]} ; i++ )) ; do
        x=${VarIndex[$i]}
        if [[ " ${VarScope[$x]} " =~ \ +c\ + ]]; then
            if [[ ${VarType[$x]} == bool ]]; then
                echo "#define $x ${VarValue[$x]}"
            fi
        fi
    done
}

mkdefs_pascal() {
    local -i i
    local x
    echo "(* $Warn_DoNotEditManually *)"
    for (( i=0 ; i<${#VarIndex[@]} ; i++ )) ; do
        x=${VarIndex[$i]}
        if [[ " ${VarScope[$x]} " =~ \ +pascal\ + ]]; then
            if [[ ${VarType[$x]} == bool ]]; then
                if [[ ${VarValue[$x]} == 1 ]]; then
                    echo "(*\$define $x*)"
                else
                    echo "(*\$undef $x*)"
                fi
            fi
        fi
    done
}

setup_flags || { echo 'Cancelled.' >&2; exit 1; }
mkdir -p src/conf
mkdefs_make > src/conf/defs.mk
mkdefs_c > src/conf/defs.h
mkdefs_pascal > src/conf/defs.pas

echo 'Done.' >&2
